- program_player ||= nil
- player_budge ||= nil
- program_budge_to_state ||= Hash.new
- show_num_playing=true if show_num_playing.nil?

%div{:id => "program_budge_collapsed_#{program_budge.id}", :class => "level_collapsed level_collapsed_#{program_budge_to_state[program_budge.id]}", 'data-program_budge_id' => program_budge.id}
  - if program_budge_to_state[program_budge.id] == :preview
    %div.level_preview_content
      %h3= program_budge.name 
  - else
    %div.level_icon
      - if program_player.present? and program_player.high_score(program_budge.id).present? and program_player.high_score(program_budge.id) > 0
        = image_tag "mobile-web/1/stars_#{program_player.high_score(program_budge.id)}_sm.png"
      - elsif program_budge_to_state[program_budge.id] == :unlocked_unplayed
        NEW
      - elsif program_budge_to_state[program_budge.id] == :unlocked_played
        PLAYED
      - elsif program_budge_to_state[program_budge.id] == :playing
        PLAYING
      - elsif program_budge_to_state[program_budge.id] == :locked
        LOCKED
    %div.level_content
      %h3= program_budge.name
    
%div{:id => "program_budge_#{program_budge.id}", :class => "level level_#{program_budge_to_state[program_budge.id]}", 'data-program_budge_id' => program_budge.id}
  - if program_budge_to_state[program_budge.id] == :preview
    %div.level_preview_content
      %h3= program_budge.name  
      - if program_budge.num_active > 0 && show_num_playing
        %p{:style=>'margin-top: 0;'} #{pluralize program_budge.num_active, 'person'} playing, #{show_num_playing}
      %div{:id => "level_details_#{program_budge.id}", :class => :level_details}
        %ul{:style => 'list-style-type: disc;'}
          - program_budge.action_templates_for_day_number(1).each do |program_action_template|
            %li= program_action_template.action_wording
        %p
          = link_to "Start here", {:controller => :store, :action => :quickbuy, :id => program_budge.id}, {:class => 'rounded noajax'}

  - else
    %div.level_icon
      - if program_player.present? and program_player.high_score(program_budge.id).present? and @program_player.high_score(program_budge.id) > 0
        = image_tag "mobile-web/1/stars_#{@program_player.high_score(program_budge.id)}_sm.png"
      - elsif program_budge_to_state[program_budge.id] == :unlocked_unplayed
        NEW
      - elsif program_budge_to_state[program_budge.id] == :unlocked_played
        PLAYED
      - elsif program_budge_to_state[program_budge.id] == :playing
        PLAYING
      - elsif program_budge_to_state[program_budge.id] == :locked
        LOCKED
      
    %div.level_content
      %h3= program_budge.name
      - if program_budge.num_active > 0
        #{pluralize program_budge.num_active, 'person'} playing
      %div{:id => "level_details_#{program_budge.id}", :class => :level_details}
        %ul{:style => 'list-style-type: disc;'}
          - program_budge.action_templates_for_day_number((player_budge.present? and player_budge.day_of_budge > 0) ? player_budge.day_of_budge : 1).each do |program_action_template|
            %li= program_action_template.action_wording
        - if program_budge_to_state[program_budge.id] == :unlocked_unplayed or program_budge_to_state[program_budge.id] == :unlocked_played
          %p= link_to "Play this level", {:controller => :play, :action => :start_budge, :id => program_budge.id}, {:class => 'rounded noajax'}
        - elsif program_budge_to_state[program_budge.id] == :playing 
          - if player_budge.present? and player_budge.scheduled?
            %p= link_to "Starting soon", {:controller => :play, :action => :program, :id => program_budge.program_id}, {:class => 'rounded noajax'}
          - else
            %p
              = link_to "Continue playing", {:controller => :play, :action => :program, :id => program_budge.program_id}, {:class => 'rounded noajax'} 
              = link_to "Start over", {:controller => :play, :action => :start_budge, :id => program_budge.id, :restart => 1}, {:class => 'rounded noajax'}             
        - elsif program_budge_to_state[program_budge.id] == :locked
          %p 
            %span{:class => 'rounded locked'} Locked
